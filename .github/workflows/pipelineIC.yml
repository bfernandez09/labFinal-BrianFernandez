name: WorkFlow
on:
  push:
    branches:
      - feature-*
  
jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectSonarCloud
        run: |
          set +e
          curl -f -X POST -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/projects/create" -d "name=${{ github.event.repository.name }}" -d "project=${{ github.event.repository.name }}" -d "organization=LabFinalDevOps" -d "visibility=public"
          if [ $? -ne 0 ]; then
            echo "Proyecto ya existe en SonarCloud"
          else
            echo "Proyecto ${{ github.event.repository.name }} creado en SonarCloud"
            echo "Se establece rama main como rama por defecto"

            curl -X POST -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/project_branches/rename" -d "project=${{ github.event.repository.name }}" -d "name=main"
          fi
      
      - name: Install SonarScanner
        run: |
          npm install -g sonar-scanner

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=labfinaldevops_labfinal-brianfernandez \
            -Dsonar.organization=labfinaldevops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.branch.name=feature-dev
          
#--------------- SAST END -----------------#

#--------------- SCA  ---------------------#

  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Yarn
        run: npm install -g yarn
      - name: Install dependencies
        run: yarn install
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@1.1.0
        id: Depcheck
        with:
          project: 'labFinal-BrianFernandez'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 4
            --enableRetired
            --log
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports

#--------------- DOCKER BUILD IMAGE  ---------------------#    
  DockerBuild:
    needs: SCA
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Docker Login 
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Build
        run: docker build --tag bfernandezziga/labfinal:latest .
      - name: Docker Push
        run: docker push bfernandezziga/labfinal:latest

#--------------- DOCKER SCAN  ---------------------#  
  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker pull 
        run: docker pull bfernandezziga/labfinal:latest
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bfernandezziga/labfinal:latest
          format: 'json'
          output: 'trivy-report.json'
          
      - name: Agrego el reporte de Trivy
        uses: actions/upload-artifact@v2
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Docker Push
        run: docker push bfernandezziga/labfinal:latest

#--------------- DAST ---------------------#  

  DAST:
    needs: DockerScan
    runs-on: self-hosted
    steps:
      - name: Despliegue de la aplicacion
        run: docker run -d -p 3000:3000 bfernandezziga/labfinal:latest
      - name: Sleep
        run: sleep 3
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: http://localhost:3000
      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: DAST-Report
          path: DAST.html